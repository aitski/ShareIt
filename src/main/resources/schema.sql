CREATE TABLE IF NOT EXISTS users
(
    user_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    name    VARCHAR(255)                                        NOT NULL,
    email   VARCHAR(512)                                        NOT NULL,
    CONSTRAINT UQ_USER_EMAIL UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS requests
(
    request_id  BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    description VARCHAR(3000)                                       NOT NULL,
    requester   BIGINT,
    CONSTRAINT fk_requester FOREIGN KEY (requester) REFERENCES users (user_id)
);

CREATE TABLE IF NOT EXISTS items
(
    item_id     BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    name        VARCHAR(255)                                        NOT NULL,
    description VARCHAR(3000)                                       NOT NULL,
    available   BOOLEAN,
    owner       BIGINT,
    request     BIGINT,
    CONSTRAINT fk_owner FOREIGN KEY (owner) REFERENCES users (user_id),
    CONSTRAINT fk_request FOREIGN KEY (request) REFERENCES requests (request_id)
);

CREATE TYPE IF NOT EXISTS request_state AS ENUM ('WAITING', 'APPROVED', 'REJECTED', 'CANCELED');

CREATE TABLE IF NOT EXISTS bookings
(
    booking_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    start_date TIMESTAMP WITHOUT TIME ZONE                         NOT NULL,
    end_date   TIMESTAMP WITHOUT TIME ZONE                         NOT NULL,
    item_id    BIGINT,
    booker_id  BIGINT,
    status     request_state,
    CONSTRAINT fk_booker FOREIGN KEY (booker_id) REFERENCES users (user_id),
    CONSTRAINT fk_item FOREIGN KEY (item_id) REFERENCES items (item_id)
);

CREATE TABLE IF NOT EXISTS comments
(
    comment_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,

    text       VARCHAR(3000),
    item_id    BIGINT,
    author_id  BIGINT,
    created    TIMESTAMP WITHOUT TIME ZONE,
    CONSTRAINT fk_author FOREIGN KEY (author_id) REFERENCES users (user_id),
    CONSTRAINT fk_item_comment FOREIGN KEY (item_id) REFERENCES items (item_id)
);